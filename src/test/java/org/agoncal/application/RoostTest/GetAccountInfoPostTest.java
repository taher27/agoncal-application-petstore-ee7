// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /GetAccountInfo_post for http method type POST in rest-assured framework

// RoostTestHash=8a95fbc531

package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;

public class GetAccountInfoPostTest {

    private static final String BASE_URL = System.getenv("BASE_URL");

    @Test
    public void GetAccountInfo_post_Test() {
        RestAssured.baseURI = BASE_URL;
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/agoncal/application/RoostTest/GetAccountInfo_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> map = createMapFromData(headers, data);
                Response response = sendPostRequest(map);
                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> createMapFromData(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Response sendPostRequest(Map<String, String> map) {
        return given()
                .pathParams(map)
                .contentType(ContentType.JSON)
                .body("{\n"+
                        "  \"customerId\": \"" + map.get("customerId") + "\n" +
                        "}")
                .when()
                .post("/GetAccountInfo")
                .then()
                .extract().response();
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 401:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            default:
                System.out.println("Unhandled status code: " + statusCode);
                break;
        }
    }

    private void validateSuccessResponse(Response response) {
        System.out.println("Description: successful operation");
        // Add your assertions for success response here
    }

    private void validateErrorResponse(Response response) {
        System.out.println("Description: Error: Authorisation failed.");
        // Add your assertions for error response here
    }

    private void validateNotFoundResponse(Response response) {
        System.out.println("Description: Error: Not Found");
        // Add your assertions for not found response here
    }
}
