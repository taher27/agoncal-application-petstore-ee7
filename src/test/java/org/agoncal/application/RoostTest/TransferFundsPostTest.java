// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /TransferFunds_post for http method type POST in rest-assured framework

// RoostTestHash=289ed66c26

package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.MatcherAssert.assertThat;

public class TransferFundsPostTest {

    @Test
    public void TransferFunds_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/agoncal/application/RoostTest/TransferFunds_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParam("koreUserId", map.get("koreUserId"))
                        .pathParam("botId", map.get("botId"))
                        .pathParam("userCode", map.get("userCode"))
                        .pathParam("accountId", map.get("accountId"))
                        .pathParam("Authorization", map.get("Authorization"))
                        .contentType(ContentType.JSON)
                        .body(buildRequestBody(map))
                        .when()
                        .post("/TransferFunds")
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String buildRequestBody(Map<String, String> map) {
        return "{\n" +
                "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
                "  \"amount\": \"" + map.get("amount") + "\",\n" +
                "  \"currency\": \"" + map.get("currency") + "\",\n" +
                "  \"sourceAccountId\": \"" + map.get("sourceAccountId") + "\",\n" +
                "  \"targetAccountId\": \"" + map.get("targetAccountId") + "\",\n" +
                "  \"date\": \"" + map.get("date") + "\",\n" +
                "  \"description\": \"" + map.get("description") + "\",\n" +
                "  \"TransactionType\": \"" + map.get("TransactionType") + "\",\n" +
                "  \"PaymentType\": \"" + map.get("PaymentType") + "\n" +
                "}";
    }

    private void validateResponse(Response response) {
        switch (response.statusCode()) {
            case 200:
                System.out.println("Description: Transaction success");
                break;
            case 401:
                validateErrorResponse(response, "Description: Error: Authorisation failed.");
                break;
            case 404:
                validateErrorResponse(response, "Description: Error: Not Found");
                break;
            default:
                System.out.println("Unexpected status code returned: " + response.statusCode());
                break;
        }
    }

    private void validateErrorResponse(Response response, String errorMessage) {
        System.out.println(errorMessage);

        if (response.jsonPath().get("err") != null) {
            if (response.jsonPath().get("err.message") != null) {
                assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
            }
        }
    }
}
