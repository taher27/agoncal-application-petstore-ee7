// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /DeleteScheduleTransfers_post for http method type POST in rest-assured framework

// RoostTestHash=47355f872f

package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Stream;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class DeleteScheduleTransfersPostTest {

    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String CSV_FILE_PATH = "src/test/java/org/agoncal/application/RoostTest/DeleteScheduleTransfers_post.csv";

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void DeleteScheduleTransfers_post_Test() throws IOException {

        try (Stream<String> lines = Files.lines(Paths.get(CSV_FILE_PATH))) {
            lines.skip(1).forEach(line -> {
                String[] data = line.split(",");
                Response response = createRequest(data).post("/DeleteScheduleTransfers");
                validateResponse(response);
            });
        }
    }

    private given createRequest(String[] data) {
        return given()
                .pathParam("koreUserId", data[0])
                .pathParam("botId", data[1])
                .pathParam("userCode", data[2])
                .pathParam("accountId", data[3])
                .pathParam("Authorization", data[4])
                .contentType(ContentType.JSON)
                .body(String.format("{\n" +
                        "  \"paymentId\": \"%s\",\n" +
                        "  \"updateTransferType\": \"%s\",\n" +
                        "  \"customerId\": \"%s\"\n" +
                        "}", data[5], data[6], data[7]));
    }

    private void validateResponse(Response response) {
        int statusCode = response.getStatusCode();

        switch (statusCode) {
            case 200:
                response.then().body("message", equalTo("Scheduled transfer deleted successfully"));
                break;
            case 401:
                response.then().body("err.message", instanceOf(String.class));
                break;
            case 404:
                response.then().body("err.message", instanceOf(String.class));
                break;
            default:
                throw new IllegalStateException("Unexpected status code: " + statusCode);
        }
    }
}
