// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /GetScheduleTransfers_post for http method type POST in rest-assured framework

// RoostTestHash=7b4d2d87f9

package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import org.junit.jupiter.api.Assertions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;

public class GetScheduleTransfersPostTest {

    @Test
    public void getScheduleTransfers_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/agoncal/application/RoostTest/GetScheduleTransfers_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParam("koreUserId", map.get("koreUserId"))
                        .pathParam("botId", map.get("botId"))
                        .pathParam("userCode", map.get("userCode"))
                        .pathParam("accountId", map.get("accountId"))
                        .header("Authorization", map.get("Authorization"))
                        .contentType(ContentType.JSON)
                        .body("{\n"+
                                "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
                                "  \"status\": \"" + map.get("status") + "\n" +
                                "}")
                        .when()
                        .post("/GetScheduleTransfers")
                        .then()
                        .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        System.out.println("Description: schedule transfer list response");
                        break;
                    case 401:
                        System.out.println("Description: Error: Authorisation failed.");
                        validateErrorResponse(response);
                        break;
                    case 404:
                        System.out.println("Description: Error: Not Found");
                        validateNotFoundResponse(response);
                        break;
                    default:
                        Assertions.fail("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateErrorResponse(Response response) {
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            Assertions.assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
        }
    }

    private void validateNotFoundResponse(Response response) {
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            Assertions.assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
        }
    }
}
