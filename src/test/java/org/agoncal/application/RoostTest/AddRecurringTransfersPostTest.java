// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /AddRecurringTransfers_post for http method type POST in rest-assured framework

// RoostTestHash=b9ae237532

package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;
import static org.junit.Assert.assertEquals;

public class AddRecurringTransfersPostTest {

    @Test
    public void AddRecurringTransfers_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/agoncal/application/RoostTest/AddRecurringTransfers_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParam("koreUserId", map.get("koreUserId"))
                        .pathParam("botId", map.get("botId"))
                        .pathParam("userCode", map.get("userCode"))
                        .pathParam("accountId", map.get("accountId"))
                        .header("Authorization", map.get("Authorization"))
                        .contentType(ContentType.JSON)
                        .body(createRequestBody(map))
                        .when()
                        .post("/AddRecurringTransfers")
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String createRequestBody(Map<String, String> map) {
        return "{\n" +
                "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
                "  \"amount\": \"" + map.get("amount") + "\",\n" +
                "  \"sourceAccountId\": \"" + map.get("sourceAccountId") + "\",\n" +
                "  \"targetAccountId\": \"" + map.get("targetAccountId") + "\",\n" +
                "  \"currency\": \"" + map.get("currency") + "\",\n" +
                "  \"status\": \"" + map.get("status") + "\",\n" +
                "  \"scheduledDate\": \"" + map.get("scheduledDate") + "\",\n" +
                "  \"recurringOptions\": \"" + map.get("recurringOptions") + "\n" +
                "}";
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                System.out.println("Description: schedule transfer added successfully");
                break;
            case 401:
                validateErrorResponse(response, "Error: Authorization failed.");
                break;
            case 404:
                validateErrorResponse(response, "Error: Not Found");
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
                break;
        }
    }

    private void validateErrorResponse(Response response, String expectedErrorMessage) {
        System.out.println("Description: " + expectedErrorMessage);
        String actualErrorMessage = response.jsonPath().get("err.message");
        assertEquals("Error message does not match", expectedErrorMessage, actualErrorMessage);
    }
}
