// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /UpdateScheduleTransfers_put for http method type PUT in rest-assured framework

// RoostTestHash=c0505709a3

package org.agoncal.application.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class UpdateScheduleTransfersPutTest {
  
    @Test  
    public void updateScheduleTransfersPutTest() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/agoncal/application/RoostTest/UpdateScheduleTransfers_put.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
                Map<String, String> map = createMapFromCsv(headers, data); 
                Response response = sendPutRequest(map);
                validateResponse(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private Map<String, String> createMapFromCsv(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();  
        for (int i = 0; i < headers.length; i++) {  
            map.put(headers[i], data[i]);  
        }  
        return map;
    }

    private Response sendPutRequest(Map<String, String> map) {
        return given()
            .pathParam("koreUserId", map.get("koreUserId"))
            .pathParam("botId", map.get("botId"))
            .pathParam("userCode", map.get("userCode"))
            .pathParam("accountId", map.get("accountId"))
            .header("Authorization", map.get("Authorization"))
            .contentType(ContentType.JSON)
            .body(createRequestBody(map))
            .when()
            .put("/UpdateScheduleTransfers")  
            .then() 
            .extract().response(); 
    }

    private String createRequestBody(Map<String, String> map) {
        return "{\n"+
            "  \"paymentId\": \"" + map.get("paymentId") + "\",\n" +
            "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
            "  \"amount\": \"" + map.get("amount") + "\",\n" +
            "  \"scheduledDate\": \"" + map.get("scheduledDate") + "\",\n" +
            "  \"sourceAccountId\": \"" + map.get("sourceAccountId") + "\",\n" +
            "  \"targetAccountId\": \"" + map.get("targetAccountId") + "\n" +
            "}";
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch(statusCode) {
            case 200:
                System.out.println("Description: Scheduled transfer updated successfully");
                break;
            case 401:
                validateErrorResponse(response, "Error: Authorization failed.");
                break;
            case 404:
                validateErrorResponse(response, "Error: Not Found");
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
                break;
        }
    }

    private void validateErrorResponse(Response response, String errorMsg) {
        System.out.println("Description: " + errorMsg);
        if (response.jsonPath().get("err") != null) {  
            if (response.jsonPath().get("err.message") != null) {
                assertThat(response.jsonPath().getString("err.message"), not(isEmptyOrNullString()));  
            }
        }
    }
}
