// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /UpdateCustomerInfo_put for http method type PUT in rest-assured framework

// RoostTestHash=89ddb90785

package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class UpdateCustomerInfoPutTest {
  
    @Test  
    public void UpdateCustomerInfo_put_Test() {  
        String baseUrl = System.getenv("BASE_URL");
        RestAssured.baseURI = baseUrl;  
  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/agoncal/application/RoostTest/UpdateCustomerInfo_put.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  

            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
                Map<String, String> map = createMapOfHeaderToData(headers, data);
                
                Response response = sendPutRequest(map);
                validateResponse(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private Map<String, String> createMapOfHeaderToData(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();  
        for (int i = 0; i < headers.length; i++) {  
            map.put(headers[i], data[i]);  
        }
        return map;
    }

    private Response sendPutRequest(Map<String, String> map) {
        return given()
                .pathParams(map)
                .contentType(ContentType.JSON)
                .body(createRequestBody(map))
                .when()
                .put("/UpdateCustomerInfo")  
                .then() 
                .extract().response();
    }

    private String createRequestBody(Map<String, String> map) {
        return "{\n"+
                "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
                "  \"email\": \"" + map.get("email") + "\",\n" +
                "  \"alternatePhoneNumber\": \"" + map.get("alternatePhoneNumber") + "\",\n" +
                "  \"isAlternateMobileNumber\": \"" + map.get("isAlternateMobileNumber") + "\",\n" +
                "  \"phone\": \"" + map.get("phone") + "\",\n" +
                "  \"isPrimaryMobileNumber\": \"" + map.get("isPrimaryMobileNumber") + "\",\n" +
                "  \"location\": \"" + map.get("location") + "\n" +
                "}";
    }

    private void validateResponse(Response response) {
        int statusCode = response.getStatusCode();
        switch (statusCode) {
            case 200:
                System.out.println("Description: Successful operation");
                break;
            case 401:
                System.out.println("Description: Authorization failed");
                validateErrorResponse(response);
                break;
            case 404:
                System.out.println("Description: Not Found");
                validateNotFoundResponse(response);
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
        }
    }

    private void validateErrorResponse(Response response) {
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            assert response.jsonPath().get("err.message") instanceof String;
        }
    }

    private void validateNotFoundResponse(Response response) {
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            assert response.jsonPath().get("err.message") instanceof String;
        }
    }
}
