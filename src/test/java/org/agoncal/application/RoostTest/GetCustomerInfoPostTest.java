// Test generated by RoostGPT for test test-RA-dec1 using AI Type Open AI and AI Model gpt-4

// Test generated for /GetCustomerInfo_post for http method type POST in rest-assured framework

// RoostTestHash=88810bf424

package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

public class GetCustomerInfoPostTest {

    private static final String FILE_PATH = "src/test/java/org/agoncal/application/RoostTest/GetCustomerInfo_post.csv";

    @Test  
    public void GetCustomerInfo_post_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                Map<String, String> map = createMapFromData(headers, data);  

                Response response = sendRequest(map);

                validateResponse(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private Map<String, String> createMapFromData(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {  
            map.put(headers[i], data[i]);  
        }  
        return map;
    }

    private Response sendRequest(Map<String, String> map) {
        return given()
                .headers(map)
                .contentType(ContentType.JSON)
                .body("{\"customerId\": \"" + map.get("customerId") + "\"}")
                .when()
                .post("/GetCustomerInfo")
                .then() 
                .extract().response();
    }

    private void validateResponse(Response response) {
        switch(response.statusCode()) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 401:
                validateErrorResponse(response, "Error: Authorisation failed.");
                break;
            case 404:
                validateNotFoundResponse(response, "Error: Not Found");
                break;
            default:
                fail("Unexpected status code: " + response.statusCode());
        }
    }

    private void validateSuccessResponse(Response response) {
        System.out.println("Description: successful operation");
        List<String> fields = List.of("alternatePhoneNumber", "customerId", "email", "identificationNumber", 
                                       "identificationType", "image", "isAlternateMobileNumber", "isPrimaryMobileNumber", 
                                       "location", "name", "firstName", "lastName", "personalBanker.name", 
                                       "personalBanker.email", "personalBanker.mobileNumber", "phone", "securityQuestions", 
                                       "segmentId", "userId", "id");

        fields.forEach(field -> {
            if (response.jsonPath().get(field) != null) {
                MatcherAssert.assertThat(response.jsonPath().get(field), notNullValue());
            }
        });
    }

    private void validateErrorResponse(Response response, String expectedErrorMessage) {
        System.out.println("Description: " + expectedErrorMessage);
        if (response.jsonPath().get("err.message") != null) {
            MatcherAssert.assertThat(response.jsonPath().get("err.message"), equalTo(expectedErrorMessage));
        }
    }

    private void validateNotFoundResponse(Response response, String expectedErrorMessage) {
        System.out.println("Description: " + expectedErrorMessage);
        if (response.jsonPath().get("err.message") != null) {
            MatcherAssert.assertThat(response.jsonPath().get("err.message"), equalTo(expectedErrorMessage));
        }
    }
}
